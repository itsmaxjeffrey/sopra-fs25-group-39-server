plugins {
    id 'org.springframework.boot' version '2.4.13'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'idea'
    id 'jacoco'
    id "org.sonarqube" version "6.0.1.5171"
}

group 'ch.uzh.ifi.hasel'
version '1.0.0'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
}

springBoot {
    mainClass.set('ch.uzh.ifi.hase.soprafs24.Application')
}

dependencies {
    

    //lombok(to remove boilerplate code)
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // Add jsr305 for @Nullable and @NonNull annotations
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'me.paulschwarz:spring-dotenv:2.5.4'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
}

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

sonar {
    properties {
    property "sonar.projectKey", "itsmaxjeffrey_sopra-fs25-group-39-server"
    property "sonar.organization", "group-39"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    maxParallelForks = 1
}

File secretPropsFile = file('./local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
}

// Load environment variables from .env.local file
def loadEnv() {
    def envFile = file('.env.local')
    if (envFile.exists()) {
        envFile.readLines().each { line ->
            if (line && !line.startsWith('#')) {
                def (key, value) = line.split('=', 2)
                if (key && value) {
                    project.ext.set(key.trim(), value.trim())
                }
            }
        }
    }
}

// Load environment variables before any task
gradle.taskGraph.whenReady { graph ->
    loadEnv()
}

defaultTasks 'bootJar', 'build'
